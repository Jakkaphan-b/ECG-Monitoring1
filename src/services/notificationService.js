import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../firebase';
// import { getFunctions, httpsCallable } from 'firebase/functions'; // ‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô

class NotificationService {
  constructor() {
    // this.functions = getFunctions(); // ‡∏û‡∏±‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
    this.emailApiUrl = 'http://localhost:3003';
    this.isDebug = true; // ‡πÄ‡∏õ‡∏¥‡∏î debug mode
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
  log(message, data = null) {
    if (this.isDebug) {
      console.log(`üîß [NotificationService] ${message}`, data || '');
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Email Server
  async checkServerStatus() {
    try {
      this.log('Checking email server status...');
      const response = await fetch(`${this.emailApiUrl}/api/health`);
      if (response.ok) {
        const data = await response.json();
        this.log('Email server is running', data);
        return { status: 'online', data };
      } else {
        this.log('Email server returned error', response.status);
        return { status: 'error', error: `HTTP ${response.status}` };
      }
    } catch (error) {
      this.log('Email server is offline', error.message);
      return { status: 'offline', error: error.message };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô Nodemailer
  async sendEmergencyNotification(patientId, alertData) {
    try {
      console.log('üö® Sending emergency notification via Nodemailer for patient:', patientId);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
      const careTeam = await this.getCareTeamWithNotifications(patientId);
      
      if (careTeam.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
      }

      const recipients = careTeam.map(member => member.email);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Email API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      const response = await fetch(`${this.emailApiUrl}/api/send-emergency-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          recipients: recipients,
          alertData: {
            patientName: alertData.patientName || '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
            type: alertData.type || '‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
            heartRate: alertData.heartRate,
            bloodPressure: alertData.bloodPressure,
            timestamp: alertData.timestamp || Date.now(),
            message: alertData.message || '‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û'
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Email API Error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      
      console.log('üö® Emergency email sent successfully:', result);
      
      return {
        success: true,
        recipients: result.recipients,
        emailsSent: result.recipients,
        linesSent: 0,
        method: 'nodemailer',
        messageId: result.messageId,
        alertType: result.alertType
      };

    } catch (error) {
      console.error('‚ùå Error sending emergency notification:', error);
      
      // Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ mailto ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
      return await this.sendEmergencyNotificationViaMailto(patientId, alertData);
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  async sendTestNotification(patientId) {
    try {
      this.log('Starting test notification process', { patientId });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ server ‡∏Å‡πà‡∏≠‡∏ô
      const serverStatus = await this.checkServerStatus();
      if (serverStatus.status !== 'online') {
        this.log('Server offline, using fallback method');
        return await this.sendTestNotificationViaMailto(patientId);
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const careTeam = await this.getCareTeamWithNotifications(patientId);
      
      if (careTeam.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô');
      }

      const recipients = careTeam.map(member => member.email);
      
      this.log('Sending test email via Nodemailer', { recipients });
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Email API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      const response = await fetch(`${this.emailApiUrl}/api/send-test-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          recipients: recipients,
          patientName: '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
        })
      });

      if (!response.ok) {
        throw new Error(`Email API Error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      
      this.log('Test email sent successfully via Nodemailer', result);
      
      return {
        success: true,
        recipients: result.recipients,
        emailsSent: result.recipients,
        linesSent: 0,
        method: 'nodemailer',
        messageId: result.messageId,
        careTeam: careTeam,
        recipientList: result.recipientList
      };

    } catch (error) {
      this.log('Error sending test notification', error.message);
      
      // Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ mailto
      return await this.sendTestNotificationViaMailto(patientId);
    }
  }

  // Fallback: ‡∏™‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô mailto
  async sendTestNotificationViaMailto(patientId) {
    try {
      console.log('üìß Fallback: Using mailto for test notification');
      
      const careTeam = await this.getCareTeamWithNotifications(patientId);
      
      if (careTeam.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
      }

      const emails = careTeam.map(member => member.email).join(';');
      const memberList = careTeam.map(member => `‚Ä¢ ${member.name} (${member.email})`).join('\n');
      
      const subject = 'üß™ ECG Monitoring - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Fallback)';
      const body = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞,

‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ECG Monitoring System (‡πÇ‡∏´‡∏°‡∏î Fallback)

üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:
‚Ä¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleDateString('th-TH')}
‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleTimeString('th-TH')}
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
‚Ä¢ ‡πÇ‡∏´‡∏°‡∏î: Email Client (Fallback)

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏£‡∏∞‡∏ö‡∏ö Nodemailer ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞
ECG Monitoring Team`;

      const mailtoLink = `mailto:${emails}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
      window.open(mailtoLink);
      
      return {
        success: true,
        recipients: careTeam.length,
        emailsSent: careTeam.length,
        linesSent: 0,
        method: 'mailto-fallback',
        message: '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß (Fallback)',
        emailList: memberList,
        careTeam: careTeam
      };

    } catch (error) {
      console.error('Error in mailto fallback:', error);
      throw error;
    }
  }

  // Fallback: ‡∏™‡πà‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô mailto
  async sendEmergencyNotificationViaMailto(patientId, alertData) {
    try {
      console.log('üö® Fallback: Using mailto for emergency notification');
      
      const careTeam = await this.getCareTeamWithNotifications(patientId);
      
      if (careTeam.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
      }

      const emails = careTeam.map(member => member.email).join(';');
      const subject = `üö® ECG EMERGENCY - ${alertData?.type || '‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'}`;
      const body = `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‚ö†Ô∏è

üë§ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: ${alertData?.patientName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
üö® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${alertData?.type || '‡∏†‡∏≤‡∏ß‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'}
üíì ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à: ${alertData?.heartRate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} bpm
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(alertData?.timestamp || Date.now()).toLocaleString('th-TH')}

üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${alertData?.message || '‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ä‡∏µ‡∏û'}

‚ö° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚ö°
üìû ‡πÇ‡∏ó‡∏£ 1669 ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô

---
ECG Monitoring System - Emergency Alert`;

      const mailtoLink = `mailto:${emails}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
      window.open(mailtoLink);
      
      return {
        success: true,
        recipients: careTeam.length,
        emailsSent: careTeam.length,
        linesSent: 0,
        method: 'mailto-fallback'
      };

    } catch (error) {
      console.error('Error in emergency mailto fallback:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  async getCareTeamWithNotifications(patientId) {
    try {
      const careTeamQuery = query(
        collection(db, 'care_team'),
        where('patient_id', '==', patientId),
        where('notifications_enabled', '==', true)
      );
      
      const careTeamSnapshot = await getDocs(careTeamQuery);
      return careTeamSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error getting care team with notifications:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  async getNotificationHistory(patientId, limit = 10) {
    try {
      const notificationQuery = query(
        collection(db, 'notification_logs'),
        where('patient_id', '==', patientId)
        // orderBy('timestamp', 'desc'),
        // limit(limit)
      );
      
      const snapshot = await getDocs(notificationQuery);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error getting notification history:', error);
      throw error;
    }
  }
}

export const notificationService = new NotificationService();